


name: klontong_project
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ^3.5.0

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  flutter_localizations:
    sdk: flutter

  # Alice is an HTTP Inspector tool which helps debugging http requests. It 
  # catches and stores http requests and responses, which can be viewed via 
  # simple UI.
  alice: ^0.4.2

  # Utilities for converting between data representations. Provides a number of
  # Sink, Codec, Decoder, and Encoder types.
  convert: ^3.1.1

  # Implementations of SHA, MD5, and HMAC cryptographic functions.
  crypto: ^3.0.5

  # Functional Programming in Dart. Purify your Dart code using
  # efficient immutable data structures, monads, lenses and other FP tools.
  dartz: ^0.10.1

  # A Dart package that helps to implement value based equality
  # without needing to explicitly override == and hashCode.
  equatable: ^2.0.5

  # Flutter Widgets that make it easy to implement the BLoC (Business Logic
  # Component) design pattern. Built to be used with the bloc state management
  # package.
  flutter_bloc: ^8.1.6
  stream_transform: ^2.1.0
  bloc_concurrency: ^0.2.5

  # Flutter Secure Storage provides API to store data in secure storage.
  # Keychain is used in iOS, KeyStore based solution is used in Android.
  flutter_secure_storage: ^9.2.2

  # Simple direct Service Locator that allows to decouple the interface
  # from a concrete implementation and to access the concrete implementation
  # from everywhere in your App.
  get_it: ^7.7.0

  # A composable, multi-platform, Future-based API for HTTP requests.
  http: ^1.2.2
  http_interceptor: ^2.0.0

  # Simple json file-based storage fo flutter. Alternative to
  # react-native AsyncStorage
  localstorage: ^5.0.0

  # A string-based path manipulation library. All of the path operations you
  # know and love, with solid support for Windows, POSIX (Linux and Mac OS X),
  # and the web.
  path: ^1.9.0

  # Flutter plugin for getting commonly used locations on host platform
  # file systems, such as the temp and app data directories.
  path_provider: ^2.1.4

  # Flutter plugin for reading and writing simple key-value pairs. Wraps NSUserDefaults on
  # iOS and SharedPreferences on Android.
  shared_preferences: ^2.3.2

  #  Provides internationalization and localization facilities, including message translation,
  #  plurals and genders, date/number formatting and parsing, and bidirectional text.
  intl: ^0.19.0

  # Provides access to a wide variety of Google Fonts, allowing you to easily use custom fonts in your Flutter application.
  google_fonts: ^6.2.1

  # A persistence library for Flutter and Dart, providing an SQLite abstraction with a repository pattern.
  floor: ^1.5.0

  # A package that helps with screen size adaptation, making it easier to develop responsive Flutter applications.
  flutter_screenutil: ^5.9.3

  # Shimmer: A package for adding shimmer effects to your Flutter application, useful for creating loading placeholders.
  shimmer: ^3.0.0

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^4.0.0

   # A build system for Dart code generation and modular compilation.
  build_runner: ^2.4.12

  # The "floor_generator" package is part of the Floor ORM (Object-Relational
  # Mapping) library, which is used to generate the necessary code for managing
  # SQLite databases in Flutter projects. This package specifically handles the
  # code generation aspects for the Floor ORM.
  floor_generator: ^1.5.0

  # A mock framework inspired by Mockito with APIs for Fakes, Mocks,
  # behavior verification, and stubbing.
  mockito: ^5.4.4

  # A Dart mock library which simplifies mocking with null safety support and
  # no manual mocks or code generation.
  mocktail: ^1.0.4

  # A testing library which makes it easy to test blocs. Built to be used with
  # the bloc state management package.
  bloc_test: ^9.1.7

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true
  # generate the internationalization I10n
  generate: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package

